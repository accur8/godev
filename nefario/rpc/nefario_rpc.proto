syntax = "proto3";

//import "google/protobuf/empty.proto";



package nefario_rpc;
option go_package = "accur8.io/godev/nefario/rpc";

message ProcessStartedRequest {
  string           processUid          = 1;
  string           parentProcessRunUid = 2;
	int32            processPid          = 3;
  string           minionUid           = 4;
  string           serviceUid          = 5;
  Timestamp        startedAt           = 6;
	repeated string  command             = 7;
	string           cwd                 = 8;
	repeated string  env                 = 9;
	string           category            = 10;
  repeated string  channels            = 11;
  bool             controllable        = 12;
  string           launchError         = 13;
  string           kind                = 14;
  string           extraDataJsonStr    = 15;
}

message UpdateMailboxRequest {
  string        processUid     = 1;
  string        mailbox        = 2;
}

message ProcessPingRequest {
  repeated ProcessPing  pings      = 1;
  Timestamp             timestamp  = 2;
}

message ProcessPing {
  string               processUid    = 1;
  map<string, uint64>  channelSizes  = 2;
}

message ProcessCompletedRequest {
  string      processUid     = 1;
  int32       exitCode       = 2;
  string      exitMessage    = 3;
  Timestamp   completedAt    = 4;
}

message Timestamp {
  sint64     unixEpochMillis  = 1;
}

message Ack {
}

message MessageFromLaunchy {
  oneof test_oneof {
    ProcessStartedRequest     processStartedRequest      = 1;
    ProcessPingRequest        processPingRequest         = 2;
    ProcessCompletedRequest   processCompletedRequest    = 3;
    StreamWrite               streamWrite                = 4;
    UpdateMailboxRequest      updateMailboxRequest       = 5;
    PingRequest               pingRequest                = 6;
  }
}

message StreamWrite {
  string           processUid   = 1;
  string           channelName  = 2;
  StreamRecord     record       = 3;
}

message StreamRecord {
  Timestamp        timestamp    = 2;
  uint64           sequence     = 3;
  repeated Buffer  buffers      = 4;     
}
message Buffer {
  Timestamp  timestamp  = 1;
  bytes      data       = 2;
  Transport  transport  = 3;
}

enum Transport {
  Transport_unspecified = 0;
  Transport_stderr      = 1;
  Transport_stdout      = 2;
  Transport_journalctl  = 3;
}


message ListServicesRequest {
  string     minionUid  = 1;
}

message ListServicesResponse {
  repeated ServiceRecord  records = 1;
}

message ServiceRecord {
  string                uid              = 1;
  string                name             = 2;
  string                minionUid        = 3;
  bool                  minionEnabled    = 4;
  ServiceUnitJson       unitJson         = 5;
}

message PingRequest {
  string                uid              = 1;
  string                payload          = 2;
}

message ServiceUnitJson {
  SystemdServiceStatus  status           = 1;
  string                statusSource     = 2;
  bool                  unitExists       = 3;
  string                unitDescription  = 4;
  string                unitName         = 5;
}

enum SystemdServiceStatus {
  SystemdServiceStatus_Unspecified  = 0;
  SystemdServiceStatus_Stopped      = 1;
  SystemdServiceStatus_Running      = 2;
  SystemdServiceStatus_Failed       = 3;
  SystemdServiceStatus_Unknown      = 4;
}

message SystemdServiceRecordCrudRequest {
  repeated SystemdServiceRecordCrud crudActions = 1;
}
message SystemdServiceRecordCrudResponse {
}

message SystemdServiceRecordCrud {
  CrudAction       action   = 1;
  ServiceRecord    record   = 2;
}

enum CrudAction {
  CrudAction_unspecified = 0;
  insert = 1;
  update = 2;
//  delete = 3;
}
