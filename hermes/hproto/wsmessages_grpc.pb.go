// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: wsmessages.proto

package hproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HermesService_SendReceive_FullMethodName   = "/hermes.HermesService/SendReceive"
	HermesService_CreateMailbox_FullMethodName = "/hermes.HermesService/CreateMailbox"
	HermesService_AddChannel_FullMethodName    = "/hermes.HermesService/AddChannel"
)

// HermesServiceClient is the client API for HermesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HermesServiceClient interface {
	SendReceive(ctx context.Context, opts ...grpc.CallOption) (HermesService_SendReceiveClient, error)
	CreateMailbox(ctx context.Context, in *CreateMailboxRequest, opts ...grpc.CallOption) (*CreateMailboxResponse, error)
	AddChannel(ctx context.Context, in *AddChannelRequest, opts ...grpc.CallOption) (*AddChannelResponse, error)
}

type hermesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHermesServiceClient(cc grpc.ClientConnInterface) HermesServiceClient {
	return &hermesServiceClient{cc}
}

func (c *hermesServiceClient) SendReceive(ctx context.Context, opts ...grpc.CallOption) (HermesService_SendReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &HermesService_ServiceDesc.Streams[0], HermesService_SendReceive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hermesServiceSendReceiveClient{stream}
	return x, nil
}

type HermesService_SendReceiveClient interface {
	Send(*MessageFromClient) error
	Recv() (*MessageToClient, error)
	grpc.ClientStream
}

type hermesServiceSendReceiveClient struct {
	grpc.ClientStream
}

func (x *hermesServiceSendReceiveClient) Send(m *MessageFromClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hermesServiceSendReceiveClient) Recv() (*MessageToClient, error) {
	m := new(MessageToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hermesServiceClient) CreateMailbox(ctx context.Context, in *CreateMailboxRequest, opts ...grpc.CallOption) (*CreateMailboxResponse, error) {
	out := new(CreateMailboxResponse)
	err := c.cc.Invoke(ctx, HermesService_CreateMailbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesServiceClient) AddChannel(ctx context.Context, in *AddChannelRequest, opts ...grpc.CallOption) (*AddChannelResponse, error) {
	out := new(AddChannelResponse)
	err := c.cc.Invoke(ctx, HermesService_AddChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HermesServiceServer is the server API for HermesService service.
// All implementations must embed UnimplementedHermesServiceServer
// for forward compatibility
type HermesServiceServer interface {
	SendReceive(HermesService_SendReceiveServer) error
	CreateMailbox(context.Context, *CreateMailboxRequest) (*CreateMailboxResponse, error)
	AddChannel(context.Context, *AddChannelRequest) (*AddChannelResponse, error)
	mustEmbedUnimplementedHermesServiceServer()
}

// UnimplementedHermesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHermesServiceServer struct {
}

func (UnimplementedHermesServiceServer) SendReceive(HermesService_SendReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method SendReceive not implemented")
}
func (UnimplementedHermesServiceServer) CreateMailbox(context.Context, *CreateMailboxRequest) (*CreateMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailbox not implemented")
}
func (UnimplementedHermesServiceServer) AddChannel(context.Context, *AddChannelRequest) (*AddChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannel not implemented")
}
func (UnimplementedHermesServiceServer) mustEmbedUnimplementedHermesServiceServer() {}

// UnsafeHermesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HermesServiceServer will
// result in compilation errors.
type UnsafeHermesServiceServer interface {
	mustEmbedUnimplementedHermesServiceServer()
}

func RegisterHermesServiceServer(s grpc.ServiceRegistrar, srv HermesServiceServer) {
	s.RegisterService(&HermesService_ServiceDesc, srv)
}

func _HermesService_SendReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HermesServiceServer).SendReceive(&hermesServiceSendReceiveServer{stream})
}

type HermesService_SendReceiveServer interface {
	Send(*MessageToClient) error
	Recv() (*MessageFromClient, error)
	grpc.ServerStream
}

type hermesServiceSendReceiveServer struct {
	grpc.ServerStream
}

func (x *hermesServiceSendReceiveServer) Send(m *MessageToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hermesServiceSendReceiveServer) Recv() (*MessageFromClient, error) {
	m := new(MessageFromClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HermesService_CreateMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServiceServer).CreateMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesService_CreateMailbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServiceServer).CreateMailbox(ctx, req.(*CreateMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermesService_AddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServiceServer).AddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HermesService_AddChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServiceServer).AddChannel(ctx, req.(*AddChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HermesService_ServiceDesc is the grpc.ServiceDesc for HermesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HermesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hermes.HermesService",
	HandlerType: (*HermesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMailbox",
			Handler:    _HermesService_CreateMailbox_Handler,
		},
		{
			MethodName: "AddChannel",
			Handler:    _HermesService_AddChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendReceive",
			Handler:       _HermesService_SendReceive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wsmessages.proto",
}
